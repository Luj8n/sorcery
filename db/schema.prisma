// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  name              String?
  email             String      @unique
  hashedPassword    String?
  role              Role        @default(USER)
  tokens            Token[]
  sessions          Session[]
  solution          Solution[]
  problems          Problem[]
  invitedToProblems Problem[]   @relation("_UsersInvitedToProblems")
  likedProblems     Problem[]   @relation("_ProblemsLikedByUsers")
  dislikedProblems  Problem[]   @relation("_ProblemsDislikedByUsers")
  savedCode         SavedCode[]
}

enum Role {
  USER
  ADMIN
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Test {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  input          String
  expectedOutput String
  problem        Problem  @relation(fields: [problemId], references: [id])
  problemId      Int
}

model Solution {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  code            String
  language        String
  languageVersion String
  executionTime   Int
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  problem         Problem  @relation(fields: [problemId], references: [id])
  problemId       Int
}

model Problem {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String      @unique
  description  String
  type         ProblemType
  visibility   Visibility
  difficulty   Difficulty
  timeout      Int?
  solutions    Solution[]
  categories   Category[]
  tests        Test[]
  invitedUsers User[]      @relation("_UsersInvitedToProblems")
  likedBy      User[]      @relation("_ProblemsLikedByUsers")
  dislikedBy   User[]      @relation("_ProblemsDislikedByUsers")
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  savedCode    SavedCode[]
}

enum ProblemType {
  IO
  FUNCTION
}

enum Visibility {
  EVERYONE
  UNLISTED
  INVITED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Category {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @unique
  description String
  problems    Problem[]
}

model SavedCode {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      String
  language  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int
}
